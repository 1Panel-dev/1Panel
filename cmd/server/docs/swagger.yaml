basePath: /api/v1
definitions:
  dto.BackupDB:
    properties:
      dbName:
        type: string
      mysqlName:
        type: string
    required:
    - dbName
    - mysqlName
    type: object
  dto.BackupOperate:
    properties:
      accessKey:
        type: string
      bucket:
        type: string
      credential:
        type: string
      id:
        type: integer
      type:
        type: string
      vars:
        type: string
    required:
    - type
    - vars
    type: object
  dto.BatchDelete:
    properties:
      names:
        items:
          type: string
        type: array
    required:
    - names
    type: object
  dto.BatchDeleteReq:
    properties:
      ids:
        items:
          type: integer
        type: array
    required:
    - ids
    type: object
  dto.ChangeDBInfo:
    properties:
      id:
        type: integer
      value:
        type: string
    required:
    - value
    type: object
  dto.CommandInfo:
    properties:
      command:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  dto.CommandOperate:
    properties:
      command:
        type: string
      id:
        type: integer
      name:
        type: string
    required:
    - command
    - name
    type: object
  dto.ComposeCreate:
    properties:
      file:
        type: string
      from:
        enum:
        - edit
        - path
        - template
        type: string
      name:
        type: string
      path:
        type: string
      template:
        type: integer
    required:
    - from
    - name
    type: object
  dto.ComposeOperation:
    properties:
      name:
        type: string
      operation:
        enum:
        - start
        - stop
        - down
        type: string
      path:
        type: string
    required:
    - name
    - operation
    - path
    type: object
  dto.ComposeTemplateCreate:
    properties:
      content:
        type: string
      description:
        type: string
      name:
        type: string
    required:
    - name
    type: object
  dto.ComposeTemplateUpdate:
    properties:
      content:
        type: string
      description:
        type: string
      id:
        type: integer
    type: object
  dto.ComposeUpdate:
    properties:
      content:
        type: string
      name:
        type: string
      path:
        type: string
    required:
    - content
    - name
    - path
    type: object
  dto.ContainerCreate:
    properties:
      autoRemove:
        type: boolean
      cmd:
        items:
          type: string
        type: array
      env:
        items:
          type: string
        type: array
      exposedPorts:
        items:
          $ref: '#/definitions/dto.PortHelper'
        type: array
      image:
        type: string
      labels:
        items:
          type: string
        type: array
      memory:
        type: integer
      name:
        type: string
      nanoCPUs:
        type: integer
      publishAllPorts:
        type: boolean
      restartPolicy:
        type: string
      volumes:
        items:
          $ref: '#/definitions/dto.VolumeHelper'
        type: array
    type: object
  dto.ContainerLog:
    properties:
      containerID:
        type: string
      mode:
        type: string
    required:
    - containerID
    - mode
    type: object
  dto.ContainerOperation:
    properties:
      name:
        type: string
      newName:
        type: string
      operation:
        enum:
        - start
        - stop
        - restart
        - kill
        - pause
        - unpause
        - rename
        - remove
        type: string
    required:
    - name
    - operation
    type: object
  dto.ContainterStats:
    properties:
      cache:
        type: number
      cpuPercent:
        type: number
      ioRead:
        type: number
      ioWrite:
        type: number
      memory:
        type: number
      networkRX:
        type: number
      networkTX:
        type: number
      shotTime:
        type: string
    type: object
  dto.CronjobCreate:
    properties:
      day:
        maximum: 31
        minimum: 1
        type: integer
      dbName:
        type: string
      exclusionRules:
        type: string
      hour:
        maximum: 23
        minimum: 0
        type: integer
      keepLocal:
        type: boolean
      minute:
        maximum: 59
        minimum: 0
        type: integer
      name:
        type: string
      retainCopies:
        minimum: 1
        type: integer
      script:
        type: string
      sourceDir:
        type: string
      specType:
        type: string
      targetDirID:
        type: integer
      type:
        type: string
      url:
        type: string
      website:
        type: string
      week:
        maximum: 7
        minimum: 1
        type: integer
    required:
    - name
    - specType
    - type
    type: object
  dto.CronjobDownload:
    properties:
      backupAccountID:
        type: integer
      recordID:
        type: integer
    required:
    - backupAccountID
    - recordID
    type: object
  dto.CronjobUpdate:
    properties:
      day:
        maximum: 31
        minimum: 1
        type: integer
      dbName:
        type: string
      exclusionRules:
        type: string
      hour:
        maximum: 23
        minimum: 0
        type: integer
      id:
        type: integer
      keepLocal:
        type: boolean
      minute:
        maximum: 59
        minimum: 0
        type: integer
      name:
        type: string
      retainCopies:
        minimum: 1
        type: integer
      script:
        type: string
      sourceDir:
        type: string
      specType:
        type: string
      targetDirID:
        type: integer
      url:
        type: string
      website:
        type: string
      week:
        maximum: 7
        minimum: 1
        type: integer
    required:
    - id
    - name
    - specType
    type: object
  dto.CronjobUpdateStatus:
    properties:
      id:
        type: integer
      status:
        type: string
    required:
    - id
    - status
    type: object
  dto.DBBaseInfo:
    properties:
      containerName:
        type: string
      name:
        type: string
      port:
        type: integer
    type: object
  dto.DaemonJsonConf:
    properties:
      cgroupDriver:
        type: string
      insecureRegistries:
        items:
          type: string
        type: array
      liveRestore:
        type: boolean
      registryMirrors:
        items:
          type: string
        type: array
      status:
        type: string
    type: object
  dto.DaemonJsonUpdateByFile:
    properties:
      file:
        type: string
      path:
        type: string
    required:
    - path
    type: object
  dto.DockerOperation:
    properties:
      operation:
        enum:
        - start
        - restart
        - stop
        type: string
    required:
    - operation
    type: object
  dto.DownloadRecord:
    properties:
      fileDir:
        type: string
      fileName:
        type: string
      source:
        enum:
        - OSS
        - S3
        - SFTP
        - MINIO
        - LOCAL
        type: string
    required:
    - fileDir
    - fileName
    - source
    type: object
  dto.ForBuckets:
    properties:
      accessKey:
        type: string
      credential:
        type: string
      type:
        type: string
      vars:
        type: string
    required:
    - credential
    - type
    - vars
    type: object
  dto.ImageBuild:
    properties:
      dockerfile:
        type: string
      from:
        type: string
      name:
        type: string
      tags:
        items:
          type: string
        type: array
    required:
    - dockerfile
    - from
    - name
    type: object
  dto.ImageLoad:
    properties:
      path:
        type: string
    required:
    - path
    type: object
  dto.ImagePull:
    properties:
      imageName:
        type: string
      repoID:
        type: integer
    required:
    - imageName
    type: object
  dto.ImagePush:
    properties:
      name:
        type: string
      repoID:
        type: integer
      tagName:
        type: string
    required:
    - name
    - repoID
    - tagName
    type: object
  dto.ImageRepoCreate:
    properties:
      auth:
        type: boolean
      downloadUrl:
        type: string
      name:
        type: string
      password:
        type: string
      protocol:
        type: string
      username:
        type: string
    required:
    - name
    type: object
  dto.ImageRepoDelete:
    properties:
      deleteInsecure:
        type: boolean
      ids:
        items:
          type: integer
        type: array
    required:
    - ids
    type: object
  dto.ImageRepoUpdate:
    properties:
      auth:
        type: boolean
      downloadUrl:
        type: string
      id:
        type: integer
      password:
        type: string
      protocol:
        type: string
      username:
        type: string
    type: object
  dto.ImageSave:
    properties:
      name:
        type: string
      path:
        type: string
      tagName:
        type: string
    required:
    - name
    - path
    - tagName
    type: object
  dto.ImageTag:
    properties:
      repoID:
        type: integer
      sourceID:
        type: string
      targetName:
        type: string
    required:
    - sourceID
    - targetName
    type: object
  dto.InspectReq:
    properties:
      id:
        type: string
      type:
        type: string
    type: object
  dto.MysqlConfUpdateByFile:
    properties:
      file:
        type: string
      mysqlName:
        type: string
    required:
    - mysqlName
    type: object
  dto.MysqlDBCreate:
    properties:
      description:
        type: string
      format:
        enum:
        - utf8mb4
        - utf8
        - gbk
        - big5
        type: string
      name:
        type: string
      password:
        type: string
      permission:
        type: string
      username:
        type: string
    required:
    - format
    - name
    - password
    - permission
    - username
    type: object
  dto.MysqlDBDelete:
    properties:
      deleteBackup:
        type: boolean
      forceDelete:
        type: boolean
      id:
        type: integer
    required:
    - id
    type: object
  dto.MysqlDescription:
    properties:
      description:
        type: string
      id:
        type: integer
    required:
    - id
    type: object
  dto.MysqlStatus:
    properties:
      Aborted_clients:
        type: string
      Aborted_connects:
        type: string
      Bytes_received:
        type: string
      Bytes_sent:
        type: string
      Com_commit:
        type: string
      Com_rollback:
        type: string
      Connections:
        type: string
      Created_tmp_disk_tables:
        type: string
      Created_tmp_tables:
        type: string
      File:
        type: string
      Innodb_buffer_pool_pages_dirty:
        type: string
      Innodb_buffer_pool_read_requests:
        type: string
      Innodb_buffer_pool_reads:
        type: string
      Key_read_requests:
        type: string
      Key_reads:
        type: string
      Key_write_requests:
        type: string
      Key_writes:
        type: string
      Max_used_connections:
        type: string
      Open_tables:
        type: string
      Opened_files:
        type: string
      Opened_tables:
        type: string
      Position:
        type: string
      Qcache_hits:
        type: string
      Qcache_inserts:
        type: string
      Questions:
        type: string
      Run:
        type: string
      Select_full_join:
        type: string
      Select_range_check:
        type: string
      Sort_merge_passes:
        type: string
      Table_locks_waited:
        type: string
      Threads_cached:
        type: string
      Threads_connected:
        type: string
      Threads_created:
        type: string
      Threads_running:
        type: string
      Uptime:
        type: string
    type: object
  dto.MysqlVariables:
    properties:
      binlog_cache_size:
        type: string
      innodb_buffer_pool_size:
        type: string
      innodb_log_buffer_size:
        type: string
      join_buffer_size:
        type: string
      key_buffer_size:
        type: string
      long_query_time:
        type: string
      max_connections:
        type: string
      max_heap_table_size:
        type: string
      query_cache_size:
        type: string
      query_cache_type:
        type: string
      read_buffer_size:
        type: string
      read_rnd_buffer_size:
        type: string
      slow_query_log:
        type: string
      sort_buffer_size:
        type: string
      table_open_cache:
        type: string
      thread_cache_size:
        type: string
      thread_stack:
        type: string
      tmp_table_size:
        type: string
    type: object
  dto.MysqlVariablesUpdate:
    properties:
      param:
        type: string
      value: {}
    type: object
  dto.NetworkCreat:
    properties:
      driver:
        type: string
      gateway:
        type: string
      ipRange:
        type: string
      labels:
        items:
          type: string
        type: array
      name:
        type: string
      options:
        items:
          type: string
        type: array
      subnet:
        type: string
    type: object
  dto.OperateByID:
    properties:
      id:
        type: integer
    required:
    - id
    type: object
  dto.PageContainer:
    properties:
      filters:
        type: string
      page:
        type: integer
      pageSize:
        type: integer
    required:
    - page
    - pageSize
    type: object
  dto.PageInfo:
    properties:
      page:
        type: integer
      pageSize:
        type: integer
    required:
    - page
    - pageSize
    type: object
  dto.PageResult:
    properties:
      items: {}
      total:
        type: integer
    type: object
  dto.PortHelper:
    properties:
      containerPort:
        type: integer
      hostPort:
        type: integer
    type: object
  dto.RecordSearch:
    properties:
      detailName:
        type: string
      name:
        type: string
      page:
        type: integer
      pageSize:
        type: integer
      type:
        type: string
    required:
    - name
    - page
    - pageSize
    - type
    type: object
  dto.RecoverDB:
    properties:
      backupName:
        type: string
      dbName:
        type: string
      mysqlName:
        type: string
    required:
    - backupName
    - dbName
    - mysqlName
    type: object
  dto.RedisConf:
    properties:
      containerName:
        type: string
      maxclients:
        type: string
      maxmemory:
        type: string
      name:
        type: string
      port:
        type: integer
      requirepass:
        type: string
      timeout:
        type: string
    type: object
  dto.RedisConfPersistenceUpdate:
    properties:
      appendfsync:
        type: string
      appendonly:
        type: string
      save:
        type: string
      type:
        enum:
        - aof
        - rbd
        type: string
    required:
    - type
    type: object
  dto.RedisConfUpdate:
    properties:
      maxclients:
        type: string
      maxmemory:
        type: string
      timeout:
        type: string
    type: object
  dto.RedisConfUpdateByFile:
    properties:
      file:
        type: string
      restartNow:
        type: boolean
    type: object
  dto.RedisPersistence:
    properties:
      appendfsync:
        type: string
      appendonly:
        type: string
      save:
        type: string
    type: object
  dto.RedisStatus:
    properties:
      connected_clients:
        type: string
      instantaneous_ops_per_sec:
        type: string
      keyspace_hits:
        type: string
      keyspace_misses:
        type: string
      latest_fork_usec:
        type: string
      mem_fragmentation_ratio:
        type: string
      tcp_port:
        type: string
      total_commands_processed:
        type: string
      total_connections_received:
        type: string
      uptime_in_days:
        type: string
      used_memory:
        type: string
      used_memory_peak:
        type: string
      used_memory_rss:
        type: string
    type: object
  dto.SearchRecord:
    properties:
      cronjobID:
        type: integer
      endTime:
        type: string
      page:
        type: integer
      pageSize:
        type: integer
      startTime:
        type: string
      status:
        type: string
    required:
    - page
    - pageSize
    type: object
  dto.SearchWithPage:
    properties:
      info:
        type: string
      page:
        type: integer
      pageSize:
        type: integer
    required:
    - info
    - page
    - pageSize
    type: object
  dto.UploadRecover:
    properties:
      dbName:
        type: string
      fileDir:
        type: string
      fileName:
        type: string
      mysqlName:
        type: string
    required:
    - dbName
    - mysqlName
    type: object
  dto.VolumeCreat:
    properties:
      driver:
        type: string
      labels:
        items:
          type: string
        type: array
      name:
        type: string
      options:
        items:
          type: string
        type: array
    type: object
  dto.VolumeHelper:
    properties:
      containerDir:
        type: string
      mode:
        type: string
      sourceDir:
        type: string
    type: object
  request.AppInstalledSearch:
    properties:
      name:
        type: string
      page:
        type: integer
      pageSize:
        type: integer
      type:
        type: string
    required:
    - page
    - pageSize
    type: object
  request.AppSearch:
    properties:
      name:
        type: string
      page:
        type: integer
      pageSize:
        type: integer
      tags:
        items:
          type: string
        type: array
      type:
        type: string
    required:
    - page
    - pageSize
    type: object
host: localhost
info:
  contact: {}
  description: 开源Linux面板
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: 1Panel
  version: "1.0"
paths:
  /apps/installed:
    post:
      consumes:
      - application/json
      description: 获取已安装应用列表
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.AppInstalledSearch'
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Search app list installed
      tags:
      - App
  /apps/search:
    post:
      consumes:
      - application/json
      description: 获取应用列表
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.AppSearch'
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Search app list
      tags:
      - App
  /backups:
    post:
      consumes:
      - application/json
      description: 创建备份账号
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.BackupOperate'
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Create backup account
      tags:
      - Backup Account
      x-panel-log:
        BeforeFuntions: []
        bodyKeys:
        - type
        formatEN: create backup account [type]
        formatZH: 创建备份账号 [type]
        paramKeys: []
  /backups/del:
    post:
      consumes:
      - application/json
      description: 删除备份账号
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.BatchDeleteReq'
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Delete backup account
      tags:
      - Backup Account
      x-panel-log:
        BeforeFuntions:
        - db: backup_accounts
          input_colume: id
          input_value: ids
          isList: true
          output_colume: type
          output_value: types
        bodyKeys:
        - ids
        formatEN: delete backup account [types]
        formatZH: 删除备份账号 [types]
        paramKeys: []
  /backups/record/del:
    post:
      consumes:
      - application/json
      description: 删除备份记录
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.BatchDeleteReq'
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Delete backup record
      tags:
      - Backup Account
      x-panel-log:
        BeforeFuntions:
        - db: backup_records
          input_colume: id
          input_value: ids
          isList: true
          output_colume: file_name
          output_value: files
        bodyKeys:
        - ids
        formatEN: delete backup records [files]
        formatZH: 删除备份记录 [files]
        paramKeys: []
  /backups/record/download:
    post:
      consumes:
      - application/json
      description: 下载备份记录
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.DownloadRecord'
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Download backup record
      tags:
      - Backup Account
      x-panel-log:
        BeforeFuntions: []
        bodyKeys:
        - source
        - fileName
        formatEN: download backup records [source][fileName]
        formatZH: 下载备份记录 [source][fileName]
        paramKeys: []
  /backups/record/search:
    post:
      consumes:
      - application/json
      description: 获取备份记录列表分页
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RecordSearch'
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Search backup records with page
      tags:
      - Backup Account
  /backups/search:
    post:
      consumes:
      - application/json
      description: 获取 bucket 列表
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ForBuckets'
      responses:
        "200":
          description: OK
          schema:
            type: anrry
      security:
      - ApiKeyAuth: []
      summary: List bucket
      tags:
      - Backup Account
  /backups/update:
    get:
      description: 获取备份账号列表
      responses:
        "200":
          description: OK
          schema:
            type: anrry
      security:
      - ApiKeyAuth: []
      summary: Search backup account
      tags:
      - Backup Account
    post:
      consumes:
      - application/json
      description: 更新备份账号信息
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.BackupOperate'
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Update backup account
      tags:
      - Backup Account
      x-panel-log:
        BeforeFuntions: []
        bodyKeys:
        - type
        formatEN: update backup account [types]
        formatZH: 更新备份账号 [types]
        paramKeys: []
  /commands:
    get:
      description: 获取快速命令列表
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CommandInfo'
      security:
      - ApiKeyAuth: []
      summary: Search command
      tags:
      - Command
    post:
      consumes:
      - application/json
      description: 获取快速命令列表分页
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.SearchWithPage'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PageResult'
      security:
      - ApiKeyAuth: []
      summary: Search command with page
      tags:
      - Command
  /commands/del:
    post:
      consumes:
      - application/json
      description: 删除快速命令
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.BatchDeleteReq'
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Delete command
      tags:
      - Command
      x-panel-log:
        BeforeFuntions:
        - db: commands
          input_colume: id
          input_value: ids
          isList: true
          output_colume: name
          output_value: names
        bodyKeys:
        - ids
        formatEN: delete quick command [names]
        formatZH: 删除快捷命令 [names]
        paramKeys: []
  /commands/update:
    post:
      consumes:
      - application/json
      description: 更新快速命令
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CommandOperate'
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Update command
      tags:
      - Command
      x-panel-log:
        BeforeFuntions: []
        bodyKeys:
        - name
        formatEN: update quick command [name]
        formatZH: 更新快捷命令 [name]
        paramKeys: []
  /containers:
    post:
      consumes:
      - application/json
      description: 创建容器
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ContainerCreate'
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Create container
      tags:
      - Container
      x-panel-log:
        BeforeFuntions: []
        bodyKeys:
        - name
        - image
        formatEN: create container [name][image]
        formatZH: 创建容器 [name][image]
        paramKeys: []
  /containers/compose:
    post:
      consumes:
      - application/json
      description: 创建容器编排
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ComposeCreate'
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Create compose
      tags:
      - Container Compose
      x-panel-log:
        BeforeFuntions: []
        bodyKeys:
        - name
        formatEN: create compose [name]
        formatZH: 创建 compose [name]
        paramKeys: []
  /containers/compose/operate:
    post:
      consumes:
      - application/json
      description: 容器编排操作
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ComposeOperation'
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Operate compose
      tags:
      - Container Compose
      x-panel-log:
        BeforeFuntions: []
        bodyKeys:
        - name
        - operation
        formatEN: compose [operation] [name]
        formatZH: compose [operation] [name]
        paramKeys: []
  /containers/compose/search:
    post:
      consumes:
      - application/json
      description: 获取编排列表分页
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.PageInfo'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PageResult'
      security:
      - ApiKeyAuth: []
      summary: Search compose list with page
      tags:
      - Container Compose
  /containers/compose/update:
    post:
      consumes:
      - application/json
      description: 更新容器编排
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ComposeUpdate'
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Update compose
      tags:
      - Container Compose
      x-panel-log:
        BeforeFuntions: []
        bodyKeys:
        - name
        formatEN: update compose information [name]
        formatZH: 更新 compose [name]
        paramKeys: []
  /containers/daemonjson:
    get:
      description: 获取 docker 配置信息
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.DaemonJsonConf'
      security:
      - ApiKeyAuth: []
      summary: Load docker daemon.json
      tags:
      - Container Docker
  /containers/daemonjson/update:
    post:
      consumes:
      - application/json
      description: 修改 docker 配置信息
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.DaemonJsonConf'
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Update docker daemon.json
      tags:
      - Container Docker
      x-panel-log:
        BeforeFuntions: []
        bodyKeys: []
        formatEN: Updated the docker daemon.json configuration
        formatZH: 更新 docker daemon.json 配置
        paramKeys: []
  /containers/daemonjson/update/byfile:
    post:
      consumes:
      - application/json
      description: 上传替换 docker 配置文件
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.DaemonJsonUpdateByFile'
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Update docker daemon.json by upload file
      tags:
      - Container Docker
      x-panel-log:
        BeforeFuntions: []
        bodyKeys: []
        formatEN: Updated the docker daemon.json configuration
        formatZH: 更新 docker daemon.json 配置
        paramKeys: []
  /containers/docker/operate:
    post:
      consumes:
      - application/json
      description: Docker 操作
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.DockerOperation'
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Operate docker
      tags:
      - Container Docker
      x-panel-log:
        BeforeFuntions: []
        bodyKeys:
        - operation
        formatEN: '[operation] docker service'
        formatZH: docker 服务 [operation]
        paramKeys: []
  /containers/docker/status:
    get:
      description: 获取 docker 服务状态
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Load docker status
      tags:
      - Container Docker
  /containers/image:
    get:
      description: 获取镜像列表
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: anrry
      security:
      - ApiKeyAuth: []
      summary: Search image list
      tags:
      - Container Image
  /containers/image/build:
    post:
      consumes:
      - application/json
      description: 构建镜像
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ImageBuild'
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Build image
      tags:
      - Container Image
      x-panel-log:
        BeforeFuntions: []
        bodyKeys:
        - name
        formatEN: build image [name]
        formatZH: 构建镜像 [name]
        paramKeys: []
  /containers/image/load:
    post:
      consumes:
      - application/json
      description: 导入镜像
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ImageLoad'
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Load image
      tags:
      - Container Image
      x-panel-log:
        BeforeFuntions: []
        bodyKeys:
        - path
        formatEN: load image from [path]
        formatZH: 从 [path] 加载镜像
        paramKeys: []
  /containers/image/pull:
    post:
      consumes:
      - application/json
      description: 拉取镜像
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ImagePull'
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Pull image
      tags:
      - Container Image
      x-panel-log:
        BeforeFuntions:
        - db: image_repos
          input_colume: id
          input_value: repoID
          isList: false
          output_colume: name
          output_value: reponame
        bodyKeys:
        - repoID
        - imageName
        formatEN: image pull [reponame][imageName]
        formatZH: 镜像拉取 [reponame][imageName]
        paramKeys: []
  /containers/image/push:
    post:
      consumes:
      - application/json
      description: 推送镜像
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ImagePush'
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Push image
      tags:
      - Container Image
      x-panel-log:
        BeforeFuntions:
        - db: image_repos
          input_colume: id
          input_value: repoID
          isList: false
          output_colume: name
          output_value: reponame
        bodyKeys:
        - repoID
        - tagName
        - name
        formatEN: push [tagName] to [reponame][name]
        formatZH: '[tagName] 推送到 [reponame][name]'
        paramKeys: []
  /containers/image/remove:
    post:
      consumes:
      - application/json
      description: 删除镜像
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.BatchDelete'
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Delete image
      tags:
      - Container Image
      x-panel-log:
        BeforeFuntions: []
        bodyKeys:
        - names
        formatEN: remove image [names]
        formatZH: 移除镜像 [names]
        paramKeys: []
  /containers/image/save:
    post:
      consumes:
      - application/json
      description: 导出镜像
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ImageSave'
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Save image
      tags:
      - Container Image
      x-panel-log:
        BeforeFuntions: []
        bodyKeys:
        - tagName
        - path
        - name
        formatEN: save [tagName] as [path]/[name]
        formatZH: 保留 [tagName] 为 [path]/[name]
        paramKeys: []
  /containers/image/search:
    post:
      consumes:
      - application/json
      description: 获取镜像列表分页
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.PageInfo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PageResult'
      security:
      - ApiKeyAuth: []
      summary: Search image list with page
      tags:
      - Container Image
  /containers/image/tag:
    post:
      consumes:
      - application/json
      description: Tag 镜像
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ImageTag'
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Tag image
      tags:
      - Container Image
      x-panel-log:
        BeforeFuntions:
        - db: image_repos
          input_colume: id
          input_value: repoID
          isList: false
          output_colume: name
          output_value: reponame
        bodyKeys:
        - repoID
        - targetName
        formatEN: tag image [reponame][targetName]
        formatZH: tag 镜像 [reponame][targetName]
        paramKeys: []
  /containers/inspect:
    post:
      consumes:
      - application/json
      description: 容器详情
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.InspectReq'
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Container inspect
      tags:
      - Container
  /containers/network:
    post:
      consumes:
      - application/json
      description: 创建容器网络
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.NetworkCreat'
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Create network
      tags:
      - Container Network
      x-panel-log:
        BeforeFuntions: []
        bodyKeys:
        - name
        formatEN: create container network [name]
        formatZH: 创建容器网络 name
        paramKeys: []
  /containers/network/del:
    post:
      consumes:
      - application/json
      description: 删除容器网络
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.BatchDelete'
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Delete network
      tags:
      - Container Network
      x-panel-log:
        BeforeFuntions: []
        bodyKeys:
        - names
        formatEN: delete container network [names]
        formatZH: 删除容器网络 [names]
        paramKeys: []
  /containers/network/search:
    post:
      consumes:
      - application/json
      description: 获取容器网络列表分页
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.PageInfo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PageResult'
      security:
      - ApiKeyAuth: []
      summary: Search network list with page
      tags:
      - Container Network
  /containers/operate:
    post:
      consumes:
      - application/json
      description: 容器操作
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ContainerOperation'
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Operate Container
      tags:
      - Container
      x-panel-log:
        BeforeFuntions: []
        bodyKeys:
        - name
        - operation
        - newName
        formatEN: container [operation] [name] [newName]
        formatZH: 容器 [name] 执行 [operation] [newName]
        paramKeys: []
  /containers/repo:
    get:
      description: 获取镜像仓库列表
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: anrry
      security:
      - ApiKeyAuth: []
      summary: Search image repo list
      tags:
      - Container Image-repo
    post:
      consumes:
      - application/json
      description: 创建镜像仓库
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ImageRepoCreate'
      produces:
      - application/json
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Create image repo
      tags:
      - Container Image-repo
      x-panel-log:
        BeforeFuntions: []
        bodyKeys:
        - name
        formatEN: create image repo [name]
        formatZH: 创建镜像仓库 [name]
        paramKeys: []
  /containers/repo/del:
    post:
      consumes:
      - application/json
      description: 删除镜像仓库
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ImageRepoDelete'
      produces:
      - application/json
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Delete image repo
      tags:
      - Container Image-repo
      x-panel-log:
        BeforeFuntions:
        - db: image_repos
          input_colume: id
          input_value: ids
          isList: true
          output_colume: name
          output_value: names
        bodyKeys:
        - ids
        formatEN: delete image repo [names]
        formatZH: 删除镜像仓库 [names]
        paramKeys: []
  /containers/repo/search:
    post:
      consumes:
      - application/json
      description: 获取镜像仓库列表分页
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.PageInfo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PageResult'
      security:
      - ApiKeyAuth: []
      summary: Search image repo list with page
      tags:
      - Container Image-repo
  /containers/repo/update:
    post:
      consumes:
      - application/json
      description: 更新镜像仓库
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ImageRepoUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Update image repo
      tags:
      - Container Image-repo
      x-panel-log:
        BeforeFuntions:
        - db: image_repos
          input_column: id
          input_value: id
          isList: false
          output_colume: name
          output_value: name
        bodyKeys:
        - id
        formatEN: update image repo information [name]
        formatZH: 更新镜像仓库 [name]
        paramKeys: []
  /containers/search:
    post:
      consumes:
      - application/json
      description: 获取容器列表分页
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.PageContainer'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PageResult'
      security:
      - ApiKeyAuth: []
      summary: Search container list with page
      tags:
      - Container
  /containers/search/log:
    post:
      consumes:
      - application/json
      description: 容器日志
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ContainerLog'
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Container logs
      tags:
      - Container
  /containers/stats/:id:
    get:
      description: 容器监控信息
      parameters:
      - description: 容器id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ContainterStats'
      security:
      - ApiKeyAuth: []
      summary: Container stats
      tags:
      - Container
  /containers/template:
    get:
      description: 获取容器编排模版列表
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: anrry
      security:
      - ApiKeyAuth: []
      summary: Search compose template list
      tags:
      - Container Compose-template
    post:
      consumes:
      - application/json
      description: 创建容器编排模版
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ComposeTemplateCreate'
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Create Compose template
      tags:
      - Container Compose-template
      x-panel-log:
        BeforeFuntions: []
        bodyKeys:
        - name
        formatEN: create compose template [name]
        formatZH: 创建 compose 模版 [name]
        paramKeys: []
  /containers/template/del:
    post:
      consumes:
      - application/json
      description: 删除容器编排模版
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.BatchDelete'
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Delete compose template
      tags:
      - Container Compose-template
      x-panel-log:
        BeforeFuntions:
        - db: compose_templates
          input_colume: id
          input_value: ids
          isList: true
          output_colume: name
          output_value: names
        bodyKeys:
        - ids
        formatEN: delete compose template [names]
        formatZH: 删除 compose 模版 [names]
        paramKeys: []
  /containers/template/search:
    post:
      consumes:
      - application/json
      description: 获取容器编排模版列表分页
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.PageInfo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PageResult'
      security:
      - ApiKeyAuth: []
      summary: Search compose template list with page
      tags:
      - Container Compose-template
  /containers/template/update:
    post:
      consumes:
      - application/json
      description: 更新容器编排模版
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ComposeTemplateUpdate'
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Update compose template
      tags:
      - Container Compose-template
      x-panel-log:
        BeforeFuntions:
        - db: compose_templates
          input_colume: id
          input_value: id
          isList: false
          output_colume: name
          output_value: name
        bodyKeys:
        - id
        formatEN: update compose template information [name]
        formatZH: 更新 compose 模版 [name]
        paramKeys: []
  /containers/volume:
    post:
      consumes:
      - application/json
      description: 创建容器存储卷
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.VolumeCreat'
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Create volume
      tags:
      - Container Volume
      x-panel-log:
        BeforeFuntions: []
        bodyKeys:
        - name
        formatEN: create container volume [name]
        formatZH: 创建容器存储卷 [name]
        paramKeys: []
  /containers/volume/del:
    post:
      consumes:
      - application/json
      description: 删除容器存储卷
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.BatchDelete'
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Delete volume
      tags:
      - Container Volume
      x-panel-log:
        BeforeFuntions: []
        bodyKeys:
        - names
        formatEN: delete container volume [names]
        formatZH: 删除容器存储卷 [names]
        paramKeys: []
  /containers/volume/search:
    get:
      consumes:
      - application/json
      description: 获取容器存储卷列表
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.PageInfo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PageResult'
      security:
      - ApiKeyAuth: []
      summary: Search volume list
      tags:
      - Container Volume
    post:
      consumes:
      - application/json
      description: 获取容器存储卷分页
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.PageInfo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PageResult'
      security:
      - ApiKeyAuth: []
      summary: Search volume list with page
      tags:
      - Container Volume
  /cronjob/del:
    post:
      consumes:
      - application/json
      description: 删除计划任务
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.BatchDeleteReq'
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Delete cronjob
      tags:
      - Cronjob
      x-panel-log:
        BeforeFuntions:
        - db: cronjobs
          input_colume: id
          input_value: ids
          isList: true
          output_colume: name
          output_value: names
        bodyKeys:
        - ids
        formatEN: delete cronjob [names]
        formatZH: 删除计划任务 [names]
        paramKeys: []
  /cronjob/download:
    post:
      consumes:
      - application/json
      description: 下载计划任务记录
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CronjobDownload'
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Download Cronjob records
      tags:
      - Cronjob
      x-panel-log:
        BeforeFuntions:
        - db: job_records
          input_colume: id
          input_value: recordID
          isList: false
          output_colume: file
          output_value: file
        bodyKeys:
        - recordID
        formatEN: download the cronjob record [file]
        formatZH: 下载计划任务记录 [file]
        paramKeys: []
  /cronjob/handle:
    post:
      consumes:
      - application/json
      description: 手动执行计划任务
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.OperateByID'
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Handle cronjob once
      tags:
      - Cronjob
      x-panel-log:
        BeforeFuntions:
        - db: cronjobs
          input_colume: id
          input_value: id
          isList: false
          output_colume: name
          output_value: name
        bodyKeys:
        - id
        formatEN: manually execute the cronjob [name]
        formatZH: 手动执行计划任务 [name]
        paramKeys: []
  /cronjob/status:
    post:
      consumes:
      - application/json
      description: 更新计划任务状态
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CronjobUpdateStatus'
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Update cronjob status
      tags:
      - Cronjob
      x-panel-log:
        BeforeFuntions:
        - db: cronjobs
          input_colume: id
          input_value: id
          isList: false
          output_colume: name
          output_value: name
        bodyKeys:
        - id
        - status
        formatEN: change the status of cronjob [name] to [status].
        formatZH: 修改计划任务 [name] 状态为 [status]
        paramKeys: []
  /cronjob/update:
    post:
      consumes:
      - application/json
      description: 更新计划任务
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CronjobUpdate'
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Update cronjob
      tags:
      - Cronjob
      x-panel-log:
        BeforeFuntions:
        - db: cronjobs
          input_colume: id
          input_value: id
          isList: false
          output_colume: name
          output_value: name
        bodyKeys:
        - id
        formatEN: update cronjob [name]
        formatZH: 更新计划任务 [name]
        paramKeys: []
  /cronjobs:
    post:
      consumes:
      - application/json
      description: 创建计划任务
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CronjobCreate'
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Create cronjob
      tags:
      - Cronjob
      x-panel-log:
        BeforeFuntions: []
        bodyKeys:
        - type
        - name
        formatEN: create cronjob [type][name]
        formatZH: 创建计划任务 [type][name]
        paramKeys: []
  /cronjobs/search:
    post:
      consumes:
      - application/json
      description: 获取计划任务分页
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.SearchWithPage'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PageResult'
      security:
      - ApiKeyAuth: []
      summary: Search cronjob list with page
      tags:
      - Cronjob
  /cronjobs/search/records:
    post:
      consumes:
      - application/json
      description: 获取计划任务记录
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.SearchRecord'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PageResult'
      security:
      - ApiKeyAuth: []
      summary: Search job records
      tags:
      - Cronjob
  /databases:
    post:
      consumes:
      - application/json
      description: 创建 mysql 数据库
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.MysqlDBCreate'
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Create mysql database
      tags:
      - Database Mysql
      x-panel-log:
        BeforeFuntions: []
        bodyKeys:
        - name
        formatEN: create mysql database [name]
        formatZH: 创建 mysql 数据库 [name]
        paramKeys: []
  /databases/backup:
    post:
      consumes:
      - application/json
      description: 备份 mysql 数据库
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.BackupDB'
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Backup mysql database
      tags:
      - Database Mysql
      x-panel-log:
        BeforeFuntions: []
        bodyKeys:
        - mysqlName
        - dbName
        formatEN: backup mysql database [mysqlName][dbName]
        formatZH: 备份 mysql 数据库 [mysqlName][dbName]
        paramKeys: []
  /databases/baseinfo:
    get:
      description: 获取 mysql 基础信息
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.DBBaseInfo'
      security:
      - ApiKeyAuth: []
      summary: Load mysql base info
      tags:
      - Database Mysql
  /databases/change/access:
    post:
      consumes:
      - application/json
      description: 修改 mysql 访问权限
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ChangeDBInfo'
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Change mysql access
      tags:
      - Database Mysql
      x-panel-log:
        BeforeFuntions:
        - db: database_mysqls
          input_colume: id
          input_value: id
          isList: false
          output_colume: name
          output_value: name
        bodyKeys:
        - id
        formatEN: Update database [name] access
        formatZH: 更新数据库 [name] 访问权限
        paramKeys: []
  /databases/change/password:
    post:
      consumes:
      - application/json
      description: 修改 mysql 密码
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ChangeDBInfo'
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Change mysql password
      tags:
      - Database Mysql
      x-panel-log:
        BeforeFuntions:
        - db: database_mysqls
          input_colume: id
          input_value: id
          isList: false
          output_colume: name
          output_value: name
        bodyKeys:
        - id
        formatEN: Update database [name] password
        formatZH: 更新数据库 [name] 密码
        paramKeys: []
  /databases/conffile/update:
    post:
      consumes:
      - application/json
      description: 上传替换 mysql 配置文件
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.MysqlConfUpdateByFile'
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Update mysql conf by upload file
      tags:
      - Database Mysql
      x-panel-log:
        BeforeFuntions: []
        bodyKeys: []
        formatEN: update the mysql database configuration information
        formatZH: 更新 mysql 数据库配置信息
        paramKeys: []
  /databases/del:
    post:
      consumes:
      - application/json
      description: 删除 mysql 数据库
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.MysqlDBDelete'
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Delete mysql database
      tags:
      - Database Mysql
      x-panel-log:
        BeforeFuntions:
        - db: database_mysqls
          input_colume: id
          input_value: id
          isList: false
          output_colume: name
          output_value: name
        bodyKeys:
        - id
        formatEN: delete mysql database [name]
        formatZH: 删除 mysql 数据库 [name]
        paramKeys: []
  /databases/del/check:
    post:
      consumes:
      - application/json
      description: Mysql 数据库删除前检查
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.OperateByID'
      responses:
        "200":
          description: OK
          schema:
            type: anrry
      security:
      - ApiKeyAuth: []
      summary: Check before delete mysql database
      tags:
      - Database Mysql
  /databases/description/update:
    post:
      consumes:
      - application/json
      description: 更新 mysql 数据库库描述信息
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.MysqlDescription'
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Update mysql database description
      tags:
      - Database Mysql
      x-panel-log:
        BeforeFuntions:
        - db: database_mysqls
          input_colume: id
          input_value: id
          isList: false
          output_colume: name
          output_value: name
        bodyKeys:
        - id
        - description
        formatEN: The description of the mysql database [name] is modified => [description]
        formatZH: mysql 数据库 [name] 描述信息修改 [description]
        paramKeys: []
  /databases/options:
    get:
      consumes:
      - application/json
      description: 获取 mysql 数据库列表
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.PageInfo'
      responses:
        "200":
          description: OK
          schema:
            type: anrry
      security:
      - ApiKeyAuth: []
      summary: Search mysql database list
      tags:
      - Cronjob
  /databases/recover:
    post:
      consumes:
      - application/json
      description: Mysql 数据库恢复
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RecoverDB'
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Recover mysql database
      tags:
      - Database Mysql
      x-panel-log:
        BeforeFuntions: []
        bodyKeys:
        - mysqlName
        - dbName
        - backupName
        formatEN: 恢复 mysql 数据库 [mysqlName][dbName] [backupName]
        formatZH: 恢复 mysql 数据库 [mysqlName][dbName] [backupName]
        paramKeys: []
  /databases/recover/byupload:
    post:
      consumes:
      - application/json
      description: Mysql 数据库从上传文件恢复
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UploadRecover'
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Recover mysql database by upload file
      tags:
      - Database Mysql
      x-panel-log:
        BeforeFuntions: []
        bodyKeys:
        - fileDir
        - fileName
        - mysqlName
        - dbName
        formatEN: mysql database recover [fileDir]/[fileName] from [mysqlName][dbName]
        formatZH: mysql 数据库从 [fileDir]/[fileName] 恢复 [mysqlName][dbName]
        paramKeys: []
  /databases/redis/backup:
    post:
      description: 备份 redis 数据库
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Backup redis
      tags:
      - Database Redis
      x-panel-log:
        BeforeFuntions: []
        bodyKeys: []
        formatEN: backup redis database
        formatZH: 备份 redis 数据库
        paramKeys: []
  /databases/redis/backup/search:
    post:
      consumes:
      - application/json
      description: 获取 redis 备份记录分页
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.PageInfo'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PageResult'
      security:
      - ApiKeyAuth: []
      summary: Search redis backup list
      tags:
      - Database Redis
  /databases/redis/conf:
    get:
      description: 获取 redis 配置信息
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.RedisConf'
      security:
      - ApiKeyAuth: []
      summary: Load redis conf
      tags:
      - Database Redis
  /databases/redis/conf/update:
    post:
      consumes:
      - application/json
      description: 更新 redis 配置信息
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RedisConfUpdate'
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Update redis conf
      tags:
      - Database Redis
      x-panel-log:
        BeforeFuntions: []
        bodyKeys: []
        formatEN: update the redis database configuration information
        formatZH: 更新 redis 数据库配置信息
        paramKeys: []
  /databases/redis/conffile/update:
    post:
      consumes:
      - application/json
      description: 上传更新 redis 配置信息
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RedisConfUpdateByFile'
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Update redis conf by file
      tags:
      - Database Redis
      x-panel-log:
        BeforeFuntions: []
        bodyKeys: []
        formatEN: update the redis database configuration information
        formatZH: 更新 redis 数据库配置信息
        paramKeys: []
  /databases/redis/password:
    post:
      consumes:
      - application/json
      description: 更新 redis 密码
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ChangeDBInfo'
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Change redis password
      tags:
      - Database Redis
      x-panel-log:
        BeforeFuntions: []
        bodyKeys: []
        formatEN: change the password of the redis database
        formatZH: 修改 redis 数据库密码
        paramKeys: []
  /databases/redis/persistence/conf:
    get:
      description: 获取 redis 持久化配置
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.RedisPersistence'
      security:
      - ApiKeyAuth: []
      summary: Load redis persistence conf
      tags:
      - Database Redis
  /databases/redis/persistence/update:
    post:
      consumes:
      - application/json
      description: 更新 redis 持久化配置
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RedisConfPersistenceUpdate'
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Update redis persistence conf
      tags:
      - Database Redis
      x-panel-log:
        BeforeFuntions: []
        bodyKeys: []
        formatEN: redis database persistence configuration update
        formatZH: redis 数据库持久化配置更新
        paramKeys: []
  /databases/redis/recover:
    post:
      description: 恢复 redis 数据库
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Recover redis
      tags:
      - Database Redis
      x-panel-log:
        BeforeFuntions: []
        bodyKeys:
        - fileDir
        - fileName
        formatEN: redis database recover from [fileDir]/[fileName]
        formatZH: redis 数据库从 [fileDir]/[fileName] 恢复
        paramKeys: []
  /databases/redis/status:
    get:
      description: 获取 redis 状态信息
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.RedisStatus'
      security:
      - ApiKeyAuth: []
      summary: Load redis status info
      tags:
      - Database Redis
  /databases/remote:
    get:
      description: 获取 mysql 远程访问权限
      responses:
        "200":
          description: OK
          schema:
            type: bool
      security:
      - ApiKeyAuth: []
      summary: Load mysql remote access
      tags:
      - Database Mysql
  /databases/search:
    post:
      consumes:
      - application/json
      description: 获取 mysql 数据库列表分页
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.PageInfo'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PageResult'
      security:
      - ApiKeyAuth: []
      summary: Search mysql database list with page
      tags:
      - Cronjob
  /databases/status:
    get:
      description: 获取 mysql 状态信息
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MysqlStatus'
      security:
      - ApiKeyAuth: []
      summary: Load mysql status info
      tags:
      - Database Mysql
  /databases/variables:
    get:
      description: 获取 mysql 性能参数信息
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MysqlVariables'
      security:
      - ApiKeyAuth: []
      summary: Load mysql variables info
      tags:
      - Database Mysql
  /databases/variables/update:
    post:
      consumes:
      - application/json
      description: mysql 性能调优
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.MysqlVariablesUpdate'
      responses:
        "200":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Update mysql variables
      tags:
      - Database Mysql
      x-panel-log:
        BeforeFuntions: []
        bodyKeys: []
        formatEN: adjust mysql database performance parameters
        formatZH: 调整 mysql 数据库性能参数
        paramKeys: []
swagger: "2.0"
